/* The following code was generated by JFlex 1.4.3 on 9/16/15 4:32 PM */

package org.hacklangidea.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import org.hacklangidea.psi.HackTypes;
import com.intellij.psi.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 9/16/15 4:32 PM from the specification file
 * <tt>/Users/fntlnz/Projects/hacklang-idea/src/org/hacklangidea/lexer/Hack.flex</tt>
 */
public class HackLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int ST_XHP_CHILD = 44;
  public static final int ST_END_HEREDOC = 16;
  public static final int ST_DOUBLE_QUOTES = 8;
  public static final int ST_LT_CHECK = 28;
  public static final int WAITING_VALUE = 48;
  public static final int ST_LOOKING_FOR_VARNAME = 20;
  public static final int ST_LOOKING_FOR_PROPERTY = 18;
  public static final int ST_ONE_LINE_COMMENT = 34;
  public static final int ST_COMMENT = 30;
  public static final int ST_DOC_COMMENT = 32;
  public static final int ST_XHP_COMMENT = 46;
  public static final int ST_IN_PHP_OPEN_TAG = 36;
  public static final int ST_XHP_END_CLOSE_TAG = 42;
  public static final int ST_AFTER_HASHBANG = 6;
  public static final int ST_LOOKING_FOR_FUNC_NAME = 24;
  public static final int ST_VAR_OFFSET = 26;
  public static final int ST_XHP_IN_TAG = 38;
  public static final int ST_LOOKING_FOR_COLON = 22;
  public static final int ST_XHP_END_SINGLETON_TAG = 40;
  public static final int ST_IN_SCRIPTING = 4;
  public static final int ST_HEREDOC = 12;
  public static final int ST_IN_HTML = 2;
  public static final int YYINITIAL = 0;
  public static final int ST_NOWDOC = 14;
  public static final int ST_BACKQUOTE = 10;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  0,  0,  1,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\4\1\4\2\0\1\4\22\0\1\4\1\0\1\0\1\0"+
    "\1\0\2\0\2\0\1\0\1\0\1\0\1\0\1\0\1\1\1\0"+
    "\1\0\1\0\10\0\1\0\6\0\4\0\1\0\1\0\24\0\1\0"+
    "\1\0\2\0\1\0\1\0\1\21\1\2\1\11\1\10\1\5\1\23"+
    "\1\27\1\22\1\6\1\0\1\26\1\20\1\30\1\13\1\12\1\25"+
    "\1\0\1\15\1\14\1\7\1\16\1\0\1\24\1\3\1\17\1\0"+
    "\1\0\1\0\1\0\1\0\201\0\uff00\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\30\0\1\1\5\0\1\2\7\0\1\3\6\0\1\4"+
    "\11\0\1\5\4\0\1\6\11\0\1\7\6\0\1\10"+
    "\5\0\1\11\13\0\1\12\11\0\1\13\1\14\1\0"+
    "\1\15\12\0\1\16\1\17\3\0\1\20\1\21\1\22"+
    "\1\23\2\0\1\24\3\0\1\25\1\26\3\0\1\27"+
    "\1\0\1\30\7\0\1\31\1\32\3\0\1\33\10\0"+
    "\1\34\1\35\1\0\1\36\1\37\4\0\1\40\4\0"+
    "\1\41\1\42\1\0\1\43\1\0\1\44\1\45\2\0"+
    "\1\46\1\47\1\50\1\51";

  private static int [] zzUnpackAction() {
    int [] result = new int[190];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\31\0\62\0\113\0\144\0\175\0\226\0\257"+
    "\0\310\0\341\0\372\0\u0113\0\u012c\0\u0145\0\u015e\0\u0177"+
    "\0\u0190\0\u01a9\0\u01c2\0\u01db\0\u01f4\0\u020d\0\u0226\0\u023f"+
    "\0\0\0\u0258\0\u0271\0\u028a\0\u02a3\0\u02bc\0\0\0\u02d5"+
    "\0\u02ee\0\u0307\0\u0320\0\u0339\0\u0352\0\u036b\0\0\0\u0384"+
    "\0\u039d\0\u03b6\0\u03cf\0\u03e8\0\u0401\0\0\0\u041a\0\u0433"+
    "\0\u044c\0\u0465\0\u047e\0\u0497\0\u04b0\0\u04c9\0\u04e2\0\0"+
    "\0\u04fb\0\u0514\0\u052d\0\u0546\0\0\0\u055f\0\u0578\0\u0591"+
    "\0\u05aa\0\u05c3\0\u05dc\0\u05f5\0\u060e\0\u0627\0\u0640\0\u0659"+
    "\0\u0672\0\u068b\0\u06a4\0\u06bd\0\u06d6\0\0\0\u06ef\0\u0708"+
    "\0\u0721\0\u073a\0\u0753\0\u076c\0\u0785\0\u079e\0\u07b7\0\u07d0"+
    "\0\u07e9\0\u0802\0\u081b\0\u0834\0\u084d\0\u0866\0\u087f\0\0"+
    "\0\u0898\0\u08b1\0\u08ca\0\u08e3\0\u08fc\0\u0915\0\u092e\0\u0947"+
    "\0\u0960\0\0\0\0\0\u0979\0\0\0\u0992\0\u09ab\0\u09c4"+
    "\0\u09dd\0\u076c\0\u09f6\0\u0a0f\0\u0a28\0\u0a41\0\u0a5a\0\0"+
    "\0\0\0\u0a73\0\u0a8c\0\u0aa5\0\0\0\0\0\0\0\0"+
    "\0\u0abe\0\u0ad7\0\0\0\u0af0\0\u0b09\0\u0b22\0\0\0\0"+
    "\0\u0b3b\0\u0b54\0\u0b6d\0\u0b86\0\u0b9f\0\0\0\u0bb8\0\u0bd1"+
    "\0\u0bea\0\u0c03\0\u0c1c\0\u0c35\0\u0c4e\0\0\0\0\0\u0c67"+
    "\0\u0c80\0\u0c99\0\0\0\u0cb2\0\u0ccb\0\u0ce4\0\u0cfd\0\u0d16"+
    "\0\u0d2f\0\u0d48\0\u0d61\0\0\0\0\0\u0d7a\0\0\0\0"+
    "\0\u0d93\0\u0dac\0\u0dc5\0\u0dde\0\0\0\u0df7\0\u0e10\0\u0e29"+
    "\0\u0e42\0\0\0\0\0\u0e5b\0\0\0\u0e74\0\0\0\0"+
    "\0\u0e8d\0\u0ea6\0\0\0\0\0\0\0\0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[190];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\32\0\1\3\1\4\2\0\1\5\1\6\1\7\1\10"+
    "\1\11\2\0\1\12\1\13\1\0\1\14\1\0\1\15"+
    "\1\0\1\16\1\17\1\20\1\0\1\21\2\0\1\22"+
    "\44\0\1\23\16\0\1\24\5\0\1\25\1\0\1\26"+
    "\4\0\1\27\23\0\1\30\7\0\1\31\4\0\1\32"+
    "\15\0\1\33\4\0\1\34\13\0\1\35\1\36\3\0"+
    "\1\37\30\0\1\40\5\0\1\41\1\42\25\0\1\43"+
    "\5\0\1\44\11\0\1\45\31\0\1\46\36\0\1\47"+
    "\22\0\1\50\3\0\1\51\3\0\1\52\34\0\1\53"+
    "\23\0\1\54\25\0\1\55\17\0\1\56\34\0\1\57"+
    "\31\0\1\60\1\61\43\0\1\62\16\0\1\63\34\0"+
    "\1\64\23\0\1\65\4\0\1\66\41\0\1\67\22\0"+
    "\1\70\1\0\1\71\24\0\1\72\24\0\1\73\11\0"+
    "\1\74\12\0\1\75\36\0\1\76\36\0\1\77\16\0"+
    "\1\100\4\0\1\101\41\0\1\102\11\0\1\103\31\0"+
    "\1\104\26\0\1\105\36\0\1\106\32\0\1\107\26\0"+
    "\1\110\23\0\1\111\30\0\1\112\31\0\1\113\42\0"+
    "\1\114\16\0\1\75\26\0\1\115\35\0\1\116\24\0"+
    "\1\117\1\0\1\120\3\0\1\121\6\0\1\122\1\123"+
    "\11\0\1\124\30\0\1\125\32\0\1\126\41\0\1\127"+
    "\16\0\1\130\34\0\1\131\36\0\1\132\31\0\1\133"+
    "\16\0\1\134\4\0\1\135\30\0\1\136\25\0\1\137"+
    "\24\0\1\140\30\0\1\141\32\0\1\142\37\0\1\143"+
    "\32\0\1\144\31\0\1\145\14\0\1\146\34\0\1\147"+
    "\37\0\1\150\23\0\1\151\27\0\1\152\44\0\1\153"+
    "\15\0\1\154\40\0\1\155\12\0\1\156\47\0\1\157"+
    "\16\0\1\160\40\0\1\161\12\0\1\162\1\0\1\163"+
    "\37\0\1\164\20\0\1\165\13\0\1\166\14\0\1\167"+
    "\32\0\1\170\45\0\1\171\25\0\1\172\25\0\1\173"+
    "\20\0\1\174\31\0\1\175\35\0\1\176\36\0\1\177"+
    "\23\0\1\200\24\0\1\201\34\0\1\202\23\0\1\203"+
    "\40\0\1\204\31\0\1\205\16\0\1\206\26\0\1\207"+
    "\32\0\1\210\31\0\1\211\31\0\1\212\25\0\1\213"+
    "\37\0\1\214\21\0\1\215\45\0\1\216\30\0\1\217"+
    "\26\0\1\220\22\0\1\221\45\0\1\222\15\0\1\223"+
    "\33\0\1\224\23\0\1\225\37\0\1\226\21\0\1\227"+
    "\35\0\1\230\21\0\1\231\25\0\1\232\36\0\1\233"+
    "\34\0\1\234\17\0\1\235\26\0\1\236\43\0\1\237"+
    "\31\0\1\240\17\0\1\241\31\0\1\242\24\0\1\243"+
    "\30\0\1\244\32\0\1\245\37\0\1\246\31\0\1\247"+
    "\33\0\1\250\20\0\1\251\37\0\1\252\20\0\1\253"+
    "\40\0\1\254\14\0\1\255\34\0\1\256\31\0\1\257"+
    "\23\0\1\260\36\0\1\261\22\0\1\262\36\0\1\263"+
    "\32\0\1\264\35\0\1\265\17\0\1\266\24\0\1\267"+
    "\46\0\1\270\17\0\1\271\25\0\1\272\26\0\1\273"+
    "\45\0\1\274\31\0\1\275\21\0\1\276\14\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3775];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\10\27\0\1\11\5\0\1\11\7\0\1\11\6\0"+
    "\1\11\11\0\1\11\4\0\1\11\11\0\1\1\6\0"+
    "\1\11\5\0\1\1\13\0\1\11\11\0\2\11\1\0"+
    "\1\11\12\0\2\11\3\0\4\11\2\0\1\11\3\0"+
    "\2\11\3\0\1\1\1\0\1\11\7\0\2\11\3\0"+
    "\1\11\10\0\2\11\1\0\2\11\4\0\1\11\4\0"+
    "\2\11\1\0\1\11\1\0\2\11\2\0\4\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[190];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public HackLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 132) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 20: 
          { return HackTypes.T_YIELD;
          }
        case 42: break;
        case 3: 
          { return HackTypes.T_AS;
          }
        case 43: break;
        case 37: 
          { return HackTypes.T_INSTEADOF;
          }
        case 44: break;
        case 25: 
          { return HackTypes.T_SWITCH;
          }
        case 45: break;
        case 38: 
          { return HackTypes.T_ENDDECLARE;
          }
        case 46: break;
        case 22: 
          { return HackTypes.T_PRINT;
          }
        case 47: break;
        case 6: 
          { return HackTypes.T_EXIT;
          }
        case 48: break;
        case 30: 
          { return HackTypes.T_FINALLY;
          }
        case 49: break;
        case 29: 
          { return HackTypes.T_DEFAULT;
          }
        case 50: break;
        case 11: 
          { return HackTypes.T_GOTO;
          }
        case 51: break;
        case 40: 
          { return HackTypes.T_INSTANCEOF;
          }
        case 52: break;
        case 7: 
          { return HackTypes.T_FOR;
          }
        case 53: break;
        case 31: 
          { return HackTypes.T_FOREACH;
          }
        case 54: break;
        case 8: 
          { return HackTypes.T_ECHO;
          }
        case 55: break;
        case 23: 
          { return HackTypes.T_ENDFOR;
          }
        case 56: break;
        case 5: 
          { return HackTypes.T_TRY;
          }
        case 57: break;
        case 1: 
          { return HackTypes.T_IF;
          }
        case 58: break;
        case 19: 
          { return HackTypes.T_SUPER;
          }
        case 59: break;
        case 32: 
          { return HackTypes.T_ENDWHILE;
          }
        case 60: break;
        case 24: 
          { return HackTypes.T_ELSEIF;
          }
        case 61: break;
        case 26: 
          { return HackTypes.T_RETURN;
          }
        case 62: break;
        case 35: 
          { return HackTypes.T_ENDSWITCH;
          }
        case 63: break;
        case 14: 
          { return HackTypes.T_TRAIT;
          }
        case 64: break;
        case 17: 
          { return HackTypes.T_CLASS;
          }
        case 65: break;
        case 34: 
          { return HackTypes.T_FUNCTION;
          }
        case 66: break;
        case 15: 
          { return HackTypes.T_THROW;
          }
        case 67: break;
        case 21: 
          { return HackTypes.T_WHILE;
          }
        case 68: break;
        case 13: 
          { return HackTypes.T_ENDIF;
          }
        case 69: break;
        case 28: 
          { return HackTypes.T_DECLARE;
          }
        case 70: break;
        case 12: 
          { return HackTypes.T_BREAK;
          }
        case 71: break;
        case 16: 
          { return HackTypes.T_CONST;
          }
        case 72: break;
        case 39: 
          { return HackTypes.T_ENDFOREACH;
          }
        case 73: break;
        case 18: 
          { return HackTypes.T_CATCH;
          }
        case 74: break;
        case 4: 
          { return HackTypes.T_ELLIPSIS;
          }
        case 75: break;
        case 33: 
          { return HackTypes.T_CONTINUE;
          }
        case 76: break;
        case 27: 
          { return HackTypes.T_EXTENDS;
          }
        case 77: break;
        case 36: 
          { return HackTypes.T_INTERFACE;
          }
        case 78: break;
        case 9: 
          { return HackTypes.T_ELSE;
          }
        case 79: break;
        case 41: 
          { return HackTypes.T_IMPLEMENTS;
          }
        case 80: break;
        case 10: 
          { return HackTypes.T_CASE;
          }
        case 81: break;
        case 2: 
          { return HackTypes.T_DO;
          }
        case 82: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
